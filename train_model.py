import os
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from text_preprocessing import load_and_preprocess_data
from model_training import CNNLSTMModel

def find_or_create_labels(df):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∫–∏ –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞ Fake News Detection
    """
    print("üîç –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–∞ —Å –º–µ—Ç–∫–∞–º–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:", df.columns.tolist())
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å –º–µ—Ç–∫–∞–º–∏
    if 'label' in df.columns:
        print("‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'label'")
        return df['label'].values
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü 'class'
    elif 'class' in df.columns:
        print("‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'class', –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –º–µ—Ç–∫–∏")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if df['class'].dtype == object:
            from sklearn.preprocessing import LabelEncoder
            le = LabelEncoder()
            labels = le.fit_transform(df['class'])
            print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏: {dict(zip(le.classes_, le.transform(le.classes_)))}")
            return labels
        return df['class'].values
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    else:
        print("‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü —Å –º–µ—Ç–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–ø–æ—Å–æ–± A: –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        fake_keywords = ['fake', 'false', 'hoax', 'misinformation', 'rumor', 'debunk']
        
        def detect_fake_label(text):
            if pd.isna(text):
                return 0
            text_lower = str(text).lower()
            return 1 if any(keyword in text_lower for keyword in fake_keywords) else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if 'text' in df.columns:
            labels = df['text'].apply(detect_fake_label).values
        elif 'title' in df.columns:
            labels = df['title'].apply(detect_fake_label).values
        else:
            # –°–ø–æ—Å–æ–± B: –°–ª—É—á–∞–π–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
            print("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            labels = np.random.randint(0, 2, size=len(df))
        
        print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫: {pd.Series(labels).value_counts().to_dict()}")
        return labels

def get_texts_column(df):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–æ–ª–±–µ—Ü —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–±—Ü–æ–≤
    text_columns_priority = ['cleaned_text', 'text', 'title', 'content', 'article']
    
    for col in text_columns_priority:
        if col in df.columns:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: '{col}'")
            return df[col].tolist()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ, –∏—â–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    text_columns = df.select_dtypes(include=[object]).columns
    if len(text_columns) > 0:
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: '{text_columns[0]}'")
        return df[text_columns[0]].tolist()
    
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü")

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ô –ú–û–î–ï–õ–ò CNN-LSTM")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    df = load_and_preprocess_data('Fake.csv')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    print(f"–°—Ç–æ–ª–±—Ü—ã: {df.columns.tolist()}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏ –º–µ—Ç–∫–∏
    texts = get_texts_column(df)
    labels = find_or_create_labels(df)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤: {len(texts)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫: {len(labels)}")
    print(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫: {pd.Series(labels).value_counts().to_dict()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
    empty_texts = sum(1 for text in texts if not text or text.strip() == "")
    if empty_texts > 0:
        print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: {empty_texts} –ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nüß† –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ CNN-LSTM...")
    model = CNNLSTMModel()
    
    print("üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    try:
        history, (X_test, y_test) = model.train(
            texts=texts,
            labels=labels,
            epochs=15,
            batch_size=32
        )
        
        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        print("üìà –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏...")
        accuracy = model.evaluate(X_test, y_test)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        model.save_model()
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
        plt.figure(figsize=(12, 4))
        
        plt.subplot(1, 2, 1)
        plt.plot(history.history['accuracy'], label='Training Accuracy')
        plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
        plt.title('–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏')
        plt.xlabel('–≠–ø–æ—Ö–∞')
        plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
        plt.legend()
        
        plt.subplot(1, 2, 2)
        plt.plot(history.history['loss'], label='Training Loss')
        plt.plot(history.history['val_loss'], label='Validation Loss')
        plt.title('–ü–æ—Ç–µ—Ä–∏ –º–æ–¥–µ–ª–∏')
        plt.xlabel('–≠–ø–æ—Ö–∞')
        plt.ylabel('–ü–æ—Ç–µ—Ä–∏')
        plt.legend()
        
        plt.tight_layout()
        plt.savefig('training_history.png')
        plt.show()
        
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.4f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–µ–∫—Å—Ç—ã –Ω–µ –ø—É—Å—Ç—ã–µ")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (0 –∏ 1)")
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()